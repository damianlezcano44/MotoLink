/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.8-dev at Sat Feb 25 03:26:04 2017. */

#ifndef PB_BASE_PB_H_INCLUDED
#define PB_BASE_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _BaseHeader {
    char magic[8];
    uint32_t cmd;
/* @@protoc_insertion_point(struct:BaseHeader) */
} BaseHeader;

typedef struct _BaseRequest {
    BaseHeader header;
/* @@protoc_insertion_point(struct:BaseRequest) */
} BaseRequest;

typedef PB_BYTES_ARRAY_T(4) BaseResponse_data_t;
typedef struct _BaseResponse {
    BaseHeader header;
    uint32_t code;
    BaseResponse_data_t data;
/* @@protoc_insertion_point(struct:BaseResponse) */
} BaseResponse;

/* Default values for struct fields */
extern const uint32_t BaseHeader_cmd_default;

/* Initializer values for message structs */
#define BaseHeader_init_default                  {"", 0u}
#define BaseRequest_init_default                 {BaseHeader_init_default}
#define BaseResponse_init_default                {BaseHeader_init_default, 0, {0, {0}}}
#define BaseHeader_init_zero                     {"", 0}
#define BaseRequest_init_zero                    {BaseHeader_init_zero}
#define BaseResponse_init_zero                   {BaseHeader_init_zero, 0, {0, {0}}}

/* Field tags (for use in manual encoding/decoding) */
#define BaseHeader_magic_tag                     1
#define BaseHeader_cmd_tag                       2
#define BaseRequest_header_tag                   1
#define BaseResponse_header_tag                  1
#define BaseResponse_code_tag                    2
#define BaseResponse_data_tag                    3

/* Struct field encoding specification for nanopb */
extern const pb_field_t BaseHeader_fields[3];
extern const pb_field_t BaseRequest_fields[2];
extern const pb_field_t BaseResponse_fields[4];

/* Maximum encoded size of messages (where known) */
#define BaseHeader_size                          16
#define BaseRequest_size                         18
#define BaseResponse_size                        30

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define BASE_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
